[tool.poetry]
name = "spectranorm"
version = "0.1.0"
description = "A Python package for spectral normative modeling of neuroimaging and other high-dimensional data."
authors = [
    "Sina Mansour L. <sina.mansour.lakouraj@gmail.com>",
]
license = "Dual license: AGPLv3 for non-commercial use; proprietary commercial license available. See LICENSE file for details."
readme = "README.md"

documentation = "https://sina-mansour.github.io/spectranorm"
homepage = "https://sina-mansour.github.io/spectranorm"
repository = "https://github.com/sina-mansour/spectranorm"

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Healthcare Industry",
  "Intended Audience :: Developers",
  "License :: Other/Proprietary License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Medical Science Apps.",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]

packages = [
    { include = "spectranorm", from = "src" }
]

# Include the data directory
include = [
    { path = "src/spectranorm/data/**/*" }
]

[tool.poetry.dependencies]
python = ">=3.10, <3.14"
numpy = ">=1.25"
scipy = ">=1.15"
pandas = ">=2.2"
arviz = ">=0.21"
joblib = ">=1.5"
nibabel = ">=5.3"
patsy = ">=1.0"
pymc = ">=5.23"
pytensor = ">=2.31"
tqdm = ">=4.67"

[tool.poetry.group.dev.dependencies]
mkdocstrings = {version = ">=0.23", extras = ["python"]}
mkdocs-material = "*"
mypy = "*"
pre-commit = "*"
pymdown-extensions = "*"
pytest = "*"
pytest-github-actions-annotate-failures = "*"
pytest-cov = "*"
python-kacl = "*"
ruff = ">=0.2.0"
types-tqdm = "*"
scipy-stubs = "*"
joblib-stubs = "*"
pandas-stubs = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py38" # The lowest supported version

[tool.ruff.lint]
# By default, enable all the lint rules.
# Add to the ignore list below if you don't want some rules.
# If you need some ignores for certain modules, see tool.ruff.lint.per-file-ignores below.
# For individual ignore cases, prefer inline `# noqa`s within the code.
select = ["ALL"]
ignore = [
    "ANN",      # Type hints related, let mypy handle these.
    "D",        # Docstrings related, way too strict to our taste
    ]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101",     # "Use of `assert` detected"
    "ARG",      # "Unused function argument". Fixtures are often unused.
    "S105",     # "Possible hardcoded password".
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.pytest.ini_options]
addopts = """\
    --cov spectranorm \
    --cov tests \
    --cov-report term-missing \
    --no-cov-on-fail \
"""

[tool.coverage.report]
fail_under = 50  # This can be increased over time (after more tests are added).
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.mypy]
# This is the global mypy configuration.
# Avoid changing this!
strict = true  # See all the enabled flags `mypy --help | grep -A 10 'Strict mode'`
disallow_any_unimported = true

# If you need to ignore something for some specific module,
# add overrides for them. Avoid changing the global config!
# For example:
# [[tool.mypy.overrides]]
# module = [
#  "my_unpyted_dependency1.*",
#  "my_unpyted_dependency2.*"
# ]
# ignore_missing_imports = true

# [[tool.mypy.overrides]]
# module = [
#   "tests/my_thing/test_my_thing",
# ]
# disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = ["patsy"]
ignore_missing_imports = true
